= TODO
:lang:		es
:author:	Enginering Team
:email:		engineering@fluid.la
:revnumber:	v1.0
:revdate:	{date}

. Reducir los errores de pylint

. Analizar la configuracion de pylint para ver si se puede personalizar en el
  Failed correspondiente, por determinado puntaje que logre el codigo

. Clarificar que el requerimiento es que funcione pyinvoke y pyenv, punto, 
  independiente del interprete de python. O clarificar en la documentacion
  el tema de los ambientes virtuales, las versiones, etc

. Sera mas facil clarificar que debe haber un commit por comentario  y no muchos
 diff con muchos comentarios

. Es necesario un archivo MANIFEST que indique que es una unidad coherente
  de software.

. Incoportar en la suite de integracion las pruebas que hacen funcionar docker
  y ansible

. Pre.commit hooks in server side
  https://git-scm.com/book/en/v2/Customizing-Git-An-Example-Git-Enforced-Policy

. Tasks que manejen el workflow de gits o aplicacion que maneja el gitflow
  http://danielkummer.github.io/git-flow-cheatsheet/

. Simplificar el workflow de Git solo a master??

. Tasks que manehen el deployment

. Las dependencias de desarrollo deberian ser otras a las dependencias de
  ejecucion, por tal motivo deben existir dos archivos de requirements, uno
  para desarrollo y otro para ejecucion: requirements-dev.txt?

. Solucionar los problemas de compilacion de YAML en CircleCI no ocurren, pero
  en los ambientes normales si

. Definir commandos para commit, pull request, etc en los archivos de
  construccion??

. https://hub.docker.com/r/generik/ansible/
  Revisar la configuracion de las imagenes desde Ansible

. Utilizar el API de ansible para hacer test de asserts propios al sistema
  operativo???

. o en su efecto utilizar TestInfra http://testinfra.readthedocs.io/en/latest/

. Revisar la documentación generada por Sphinx a Alabaster

. Crear una imagen docker de FLUIDAsserts

. Revisar build en CI de los pull-request
  https://circleci.com/docs/fork-pr-builds/

. Resolver los warnings de compilación de YAML (quitar YAML?)
  https://www.atlassian.com/git/tutorials/git-hooks/

. O con docker compose:
  http://www.heavybit.com/library/blog/opinionated-tour-of-testing-tools/

. Añadir soporte de Wheel

. Analizar cambio en la arquitectura de linters: frosted vs pyflakes
  https://github.com/klen/pylama

. Volver a revisar tox o doit como herramientas de integracion

. Revisar la pertinencia del API de Mocks
  https://docs.python.org/dev/library/unittest.mock.html

. Revisar el mock de http con:
  https://github.com/gabrielfalcao/HTTPretty (problemas con python3)

. Revisar si el formato estandar sera ascii o utf-8
  https://docs.python.org/2.3/whatsnew/section-encodings.html
  https://docs.python.org/3/howto/unicode.html

. http://dl.acm.org/citation.cfm?id=2896929
  Automatic web security unit testing: XSS vulnerability detection

. Historico de cobertura con: https://coveralls.io/

. Historico de calidad de codigo: https://codeclimate.com/

. Integracion continua en Windows: https://www.appveyor.com/

. Deploy a heroku

. Pruebas unitarias de los mensajes de error en los logs? 
  https://pypi.python.org/pypi/pytest-capturelog

. Adicionar cloc en el proceso de integracion continua y build

. Porque no pasa el flake8 de lint pero si el de pre_commit

. Hacer refactoring de las suites de pruebas para que sean menos
  repetitivas: 
  http://doc.pytest.org/en/latest/parametrize.html

include::include/footer.adoc[]
