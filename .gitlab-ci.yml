---

image: "${CI_REGISTRY_IMAGE}:builder"

variables:
  DOCKER_DRIVER: overlay2

services:
  - docker:dind

before_script:
  - docker login registry.gitlab.com -u $DOCKER_USER -p $DOCKER_PASS ||
      echo 'Docker not needed in this stage.'

stages:
  - build
  - test
  - mr-check
  - deploy
  - postdeploy
  - cleanup
  - remove-branches
  - coverage

.kaniko_config: &kaniko_config
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - echo '{"auths":{"'"${CI_REGISTRY}"'":{"username":"'"${CI_REGISTRY_USER}"'","password":"'"${CI_REGISTRY_PASSWORD}"'"}}}'
        > /kaniko/.docker/config.json

build:
  stage: build
  <<: *kaniko_config
  services: []
  script:
    - /kaniko/executor
        --dockerfile Dockerfile.builder
        --context .
        --destination "${CI_REGISTRY_IMAGE}:builder"
        --cache true
        --cache-repo "${CI_REGISTRY_IMAGE}"/builder-cache
        --cleanup
        --verbosity warn
  retry: 2
  only:
    - schedules

commitlint:
  image: starefossen/ruby-node:2-10
  stage: test
  before_script:
    - npm install --unsafe-perm
  script:
    - ./ci-scripts/commitlint-checks.sh
  except:
    - master
    - schedules

lint:
  stage: test
  script:
    - scons lint
    - overcommit -s && overcommit -s pre-commit && overcommit -r
  retry: 2
  except:
    - master
    - schedules

bandit:
  stage: test
  script:
    - scons bandit
  retry: 2
  except:
    - master
    - schedules

test:
  stage: test
  script:
    - scons test
    - cp build/coverage/results.xml coverage.xml
    - cp build/coverage/html/index.html coverage.html
  artifacts:
    name: "coverage_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA:0:8}"
    paths:
      - coverage.xml
      - coverage.html
  retry: 2

coverage-report:
  stage: coverage
  variables:
    GITLAB_API: "${CI_API_V4_URL}"
    PROJECT_ID: "${CI_PROJECT_ID}"
    BRANCH: "${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}"
    TOKEN: "${CI_JOB_TOKEN}"
  script:
    - curl -Lo artifacts.zip
        "${GITLAB_API}/projects/${PROJECT_ID}/jobs/artifacts/${BRANCH}/download?job=test&job_token=${TOKEN}"
    - unzip artifacts.zip
    - scons codecov
    - cat coverage.html |
        grep -Po '(?<=pc_cov">)\d+%' |
        xargs echo 'Coverage:'
  retry: 2
  only:
    - merge_requests
  except:
    - master

fluidasserts:
  image: fluidattacks/asserts
  services: []
  variables:
    FA_STRICT: "false"
  script:
    - asserts -o deploy/container/exploit.py
  except:
    - master
    - schedules

mr-test:
  stage: mr-check
  variables:
    GIT_STRATEGY: clone
  script:
    - ./ci-scripts/check-branch.sh
  only:
    - merge_requests

danger:
  image: starefossen/ruby-node:2-10
  stage: mr-check
  variables:
    DANGER_GITLAB_API_TOKEN: ${DANGER_TOKEN}
    DANGER_GITLAB_HOST: "gitlab.com"
    DANGER_GITLAB_API_BASE_URL: "https://gitlab.com/api/v4"
  before_script:
    - export CI_MERGE_REQUEST_ID=$(git ls-remote -q origin merge-requests\*\head
      | grep ${CI_COMMIT_SHA}
      | sed 's/.*refs\/merge-requests\/\([0-9]*\)\/head/\1/g')
    - npm install --unsafe-perm
    - bundle install
  script:
    - bundle exec danger --verbose --fail-on-errors=true
  only:
    - merge_requests

deploy:
  stage: deploy
  script:
    - scons dist
    - scons deploy
    - mkdir -p dist && cp -a build/dist/*.zip dist/
  retry: 2
  only:
    - master
  except:
    - schedules

create_installer:
  stage: deploy
  script:
    - scons dist
    - python3 deploy/download.py 2> /dev/null
  retry: 2
  artifacts:
    name: "fluidasserts_${CI_COMMIT_SHA:0:8}"
    paths:
      - deploy/installer/
  only:
    - master
  except:
    - schedules

push_container:
  stage: postdeploy
  script:
    - docker login fluid-docker.jfrog.io -u $JFROG_USER -p $JFROG_PASS
    - docker login -u $HUB_USER -p $HUB_PASS
    - scons dist
    - mkdir -p dist && cp -a build/dist/*.zip dist/
    - docker build --no-cache -f Dockerfile.runner
      -t registry.gitlab.com/fluidattacks/asserts:runner .
    - docker push registry.gitlab.com/fluidattacks/asserts:runner
    - docker tag registry.gitlab.com/fluidattacks/asserts:runner
      fluidattacks/asserts
    - docker push fluidattacks/asserts
  retry: 2
  only:
    - master
  except:
    - schedules

pages:
  stage: deploy
  script:
    - scons sphinxdoc
  artifacts:
    paths: [public/]
  only:
    - master
  except:
    - schedules

remove-branches:
  stage: remove-branches
  variables:
    GIT_STRATEGY: fetch
  script:
    - url_host=$(git remote get-url origin
      | sed -e "s/https:\/\/gitlab-ci-token:.*@//g")
    - git remote set-url origin "https://gitlab-ci-token:${API_TKN}@${url_host}"
    - ./ci-scripts/remove-branches.sh
  only:
    - schedules
